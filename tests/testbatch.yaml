full_length_talon_file: 
    talon_paths: 
        - /vscode.talon
    runs: 3
    model_settings:
        openai_model: "gpt-3.5-turbo"
        model_endpoint: "https://api.openai.com/v1/chat/completions"
        model_temperature: 0.6
        model_system_prompt: 
            "You are being integraded into a voice command software. Your task is to take 
            the user's raw speech to text strings and compare them to available commands to find the
            most likely command that the user was asking for. The commands come in a .yaml file. 
            The possible commands are formatted as:
            spoken form: action. There may be multiple spoken forms surrounded by ( ), seperated by |, and the action may
            include several written forms or python commands. Also, the spoken form may include open ended 
            tags where user dication would be inserted which could look like this: nova <user.text>$:
            result = user.command_match(text)
            user.nova_hide()
            user.nova_show(result) . If there is an open ended tag, make sure to put whatever recommened text for the user to say in <>. 
            Also note that there are sometimes comments noted with # that may provide aditional context for the block of commands below them.
            Your task is to simply return the most likely command (just the spoken form of the command only, nothing else). If it seems
            like there may be several likely options, you can return several options, seperated by ', or' "
        model_prompt:
            "Respond with the most likely command, no other text. Here is a list of the possible commands:"
    test_commands: 
        window reload: 
            - reload
            - reload this window
            - refresh the window 
            - update what's on the window
        window close:
            - close this window
            - close
            - exit out of this window
            - exit
        bar explore:
            - show the file explorer
            - Show me the files in VS code
            - Explore bar
            - Explore files
        bar extensions: 
            - Show me the extension store
            - Show all the extensions
            - On the side panel, click the extensions
            - On the side bar, click the extensions
        bar outline: 
            - show the outline
        bar run: 
            - show the debug panel
            - on the side bar, show debug
            - debug 
            - debug window
            - run window
        bar search: 
            - search
            - open the search
            - help me find
            - search in vscode
        bar source:
            - show the git panel
            - show the source management 
            - source
            - switch to the source view
        bar test: 
            - Focus the testing panel
            - Show the testing window
            - Open testing
            - Show the tests
        bar switch: 
            - Hide the sidebar
            - Show the sidebar
            - Toggle the sidebar
            - bar show
            - bar hide
            - bar display 

medium_length_talon_file: 
    talon_paths: 
        - /vscode_medium.talon
    runs: 3
    model_settings:
        openai_model: "gpt-3.5-turbo"
        model_endpoint: "https://api.openai.com/v1/chat/completions"
        model_temperature: 0.6
        model_system_prompt: 
            "You are being integraded into a voice command software. Your task is to take 
            the user's raw speech to text strings and compare them to available commands to find the
            most likely command that the user was asking for. The commands come in a .yaml file. 
            The possible commands are formatted as:
            spoken form: action. There may be multiple spoken forms surrounded by ( ), seperated by |, and the action may
            include several written forms or python commands. Also, the spoken form may include open ended 
            tags where user dication would be inserted which could look like this: nova <user.text>$:
            result = user.command_match(text)
            user.nova_hide()
            user.nova_show(result) . If there is an open ended tag, make sure to put whatever recommened text for the user to say in <>. 
            Also note that there are sometimes comments noted with # that may provide aditional context for the block of commands below them.
            Your task is to simply return the most likely command (just the spoken form of the command only, nothing else). If it seems
            like there may be several likely options, you can return several options, seperated by ', or' "
        model_prompt:
            "Respond with the most likely command, no other text. Here is a list of the possible commands:"
    test_commands: 
        window reload: 
            - reload
            - reload this window
            - refresh the window 
            - update what's on the window
        window close:
            - close this window
            - close
            - exit out of this window
            - exit
        bar explore:
            - show the file explorer
            - Show me the files in VS code
            - Explore bar
            - Explore files
        bar extensions: 
            - Show me the extension store
            - Show all the extensions
            - On the side panel, click the extensions
            - On the side bar, click the extensions
        bar outline: 
            - show the outline
        bar run: 
            - show the debug panel
            - on the side bar, show debug
            - debug 
            - debug window
            - run window
        bar search: 
            - search
            - open the search
            - help me find
            - search in vscode
        bar source:
            - show the git panel
            - show the source management 
            - source
            - switch to the source view
        bar test: 
            - Focus the testing panel
            - Show the testing window
            - Open testing
            - Show the tests
        bar switch: 
            - Hide the sidebar
            - Show the sidebar
            - Toggle the sidebar
            - bar show
            - bar hide
            - bar display 


simplified_talon_file: 
    talon_paths: 
        - /vscode_minimal.talon
    runs: 3
    model_settings:
        openai_model: "gpt-3.5-turbo"
        model_endpoint: "https://api.openai.com/v1/chat/completions"
        model_temperature: 0.6
        model_system_prompt: 
            "You are being integraded into a voice command software. Your task is to take 
            the user's raw speech to text strings and compare them to available commands to find the
            most likely command that the user was asking for. The commands come in a .yaml file. 
            The possible commands are formatted as:
            spoken form: action. There may be multiple spoken forms surrounded by ( ), seperated by |, and the action may
            include several written forms or python commands. Also, the spoken form may include open ended 
            tags where user dication would be inserted which could look like this: nova <user.text>$:
            result = user.command_match(text)
            user.nova_hide()
            user.nova_show(result) . If there is an open ended tag, make sure to put whatever recommened text for the user to say in <>. 
            Also note that there are sometimes comments noted with # that may provide aditional context for the block of commands below them.
            Your task is to simply return the most likely command (just the spoken form of the command only, nothing else). If it seems
            like there may be several likely options, you can return several options, seperated by ', or' "
        model_prompt:
            "Respond with the most likely command, no other text. Here is a list of the possible commands:"
    test_commands: 
        window reload: 
            - reload
            - reload this window
            - refresh the window 
            - update what's on the window
        window close:
            - close this window
            - close
            - exit out of this window
            - exit
        bar explore:
            - show the file explorer
            - Show me the files in VS code
            - Explore bar
            - Explore files
        bar extensions: 
            - Show me the extension store
            - Show all the extensions
            - On the side panel, click the extensions
            - On the side bar, click the extensions
        bar outline: 
            - show the outline
        bar run: 
            - show the debug panel
            - on the side bar, show debug
            - debug 
            - debug window
            - run window
        bar search: 
            - search
            - open the search
            - help me find
            - search in vscode
        bar source:
            - show the git panel
            - show the source management 
            - source
            - switch to the source view
        bar test: 
            - Focus the testing panel
            - Show the testing window
            - Open testing
            - Show the tests
        bar switch: 
            - Hide the sidebar
            - Show the sidebar
            - Toggle the sidebar
            - bar show
            - bar hide
            - bar display 



